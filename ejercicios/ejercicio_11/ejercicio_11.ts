/*
Enunciado Ejercicio 11:
 Crea una funci√≥n a la cual le pase un array de numeros
 y un numero que ser√° el resultado de la suma de dos de los valores
 
Ejemplos:
sumarDos([3, 7, 8, 2], 10) // [3, 7] (ambos suman 10)
sumarDos([4, 5, 9, 1], 10) // [9, 1]
sumarDos([1, 2, 3, 4], 5) // [2, 3]
 
*/

//! SOLUCION 1 MENOS EFICIENTE.
// function sumarDos( arr: number[], num: number ): number[] | string {

//     for (const i in arr) {

//         for (const key in arr) {
//             if( i !== key ) 
//                 if ( arr[i] + arr[key] === num ) return [ arr[i], arr[key] ] ;
//         }

//     }
//     return 'no se encuentra los numeros dentro del array';
// }

// ! SOLUCION 2 

// function sumarDos( arr: number[], num: number ): (number | undefined)[] | string {

//     const primerValor = arr.find( (item, index) => {
//         const result = num - item; 
//         return arr.includes( result, index + 1 ) 
//     })
//     const segundoValor = num - primerValor!;
//     const response = [primerValor, segundoValor] 

//     if( !response[0] ) return 'no se encuentra los numeros dentro del array';
    
//     return response;
// }


// ! SOLUCION 3 + EFICIENTE

// function sumarDos(array: number[], objetivo: number): number[] | string {
//     // Crear un objeto vac√≠o
//     let numeros: any = {};
//     // Recorrer el array
//     for (let num of array) {
//       // Calcular el complemento del n√∫mero actual
//       let complemento = objetivo - num;
//       // Comprobar si el complemento est√° en el objeto
//       if (numeros[complemento]) {
//         // Si est√°, devolver el par de n√∫meros
//         return [complemento, num];
//       }
//       // Si no est√°, a√±adir el n√∫mero al objeto
//       numeros[num] = true;
//     }
//     // Si no se encuentra ning√∫n par, devolver un array vac√≠o
//     return 'no se encuentra';
// }

// ? No, la primera manera no es m√°s eficiente que la segunda. La primera manera usa los m√©todos find () e includes () de los arrays de JavaScript, que recorren el array hasta encontrar el elemento buscado o hasta llegar al final. Esto significa que la complejidad de esta soluci√≥n es de O (n^2), ya que se hace una b√∫squeda lineal dentro de otra b√∫squeda lineal. La segunda manera usa un objeto para guardar los n√∫meros que ya se han visto en el array, y luego comprueba si el complemento de cada n√∫mero est√° en el objeto. Esto significa que la complejidad de esta soluci√≥n es de O (n), ya que se recorre el array una sola vez y la b√∫squeda del complemento es constante. Puedes ver una comparaci√≥n del rendimiento de ambas soluciones en este enlace, donde se muestra que la segunda manera es mucho m√°s r√°pida que la primera.

// ? Es importante elegir el m√©todo adecuado para resolver un problema, ya que puede afectar al tiempo y al espacio que se necesita para ejecutar el c√≥digo. Los arrays de JavaScript tienen muchos m√©todos √∫tiles, pero no todos son igual de eficientes. Te recomiendo que leas este art√≠culo sobre algunos m√©todos de los arrays que pueden mejorar el rendimiento de tu c√≥digo. Tambi√©n puedes consultar esta p√°gina sobre la complejidad algor√≠tmica y c√≥mo medirla. Espero haberte ayudado con tu ejercicio de JavaScript. üòä

function sumarDos( arr: number[], objetivo: number ): (number[] | string) {
    const isArr: any = {}
    for ( const item of arr ) {
        const complemento = objetivo - item;
        if( isArr[complemento] ) return [item, complemento]
        isArr[item] = true;
    }
    
    return 'no se encuentran los resultados'
}



console.time() 

console.log( sumarDos( [4, 5, 9, 1], 10 ) ) 

console.timeEnd()